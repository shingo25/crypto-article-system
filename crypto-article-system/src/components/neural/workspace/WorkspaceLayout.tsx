'use client'

import React from 'react'
import { cn } from '@/lib/utils'
import { NeuralCard, CardContent, CardHeader, CardTitle } from '@/components/neural/NeuralCard'
import { NeuralButton } from '@/components/neural/NeuralButton'
import { Badge } from '@/components/ui/badge'
import { 
  PanelLeftOpen, 
  PanelLeftClose,
  Maximize2,
  Minimize2,
  RotateCcw,
  Settings
} from 'lucide-react'
import { useWorkspaceStore } from '@/lib/stores/workspaceStore'
import { TopicColumn } from './TopicColumn'
import { GenerationColumn } from './GenerationColumn'
import { PreviewColumn } from './PreviewColumn'

interface WorkspaceLayoutProps {
  className?: string
  initialTopic?: string
  initialCoin?: string
  isAutoGenerated?: boolean
}

export function WorkspaceLayout({ 
  className, 
  initialTopic, 
  initialCoin, 
  isAutoGenerated 
}: WorkspaceLayoutProps) {
  const { 
    activeColumn, 
    setActiveColumn,
    selectedTopic,
    currentArticle,
    generationState,
    resetWorkspace
  } = useWorkspaceStore()

  const [isLeftCollapsed, setIsLeftCollapsed] = React.useState(false)
  const [isRightCollapsed, setIsRightCollapsed] = React.useState(false)
  const [isFullscreen, setIsFullscreen] = React.useState(false)

  // マーケット情報からの自動生成時の初期化
  React.useEffect(() => {
    if (initialTopic && isAutoGenerated) {
      // 自動生成の場合は Generation カラムをアクティブにする
      setActiveColumn('generation')
      
      // TODO: ワークスペースストアに初期データを設定
      // 実際の実装では、ここでストアの状態を更新する
    }
  }, [initialTopic, isAutoGenerated, setActiveColumn])

  const getColumnWidth = (column: 'left' | 'center' | 'right') => {
    if (isFullscreen) {
      if (activeColumn === 'topics' && column === 'left') return 'col-span-12'
      if (activeColumn === 'generation' && column === 'center') return 'col-span-12'
      if (activeColumn === 'preview' && column === 'right') return 'col-span-12'
      return 'hidden'
    }

    if (isLeftCollapsed && isRightCollapsed) {
      return column === 'center' ? 'col-span-12' : 'hidden'
    }
    if (isLeftCollapsed) {
      return column === 'left' ? 'hidden' : column === 'center' ? 'col-span-8' : 'col-span-4'
    }
    if (isRightCollapsed) {
      return column === 'right' ? 'hidden' : column === 'left' ? 'col-span-4' : 'col-span-8'
    }

    return 'col-span-4' // デフォルト: 均等3分割
  }

  const WorkspaceHeader = () => (
    <div className="flex items-center justify-between p-4 border-b border-neural-elevated/30">
      <div className="flex items-center gap-4">
        <h1 className="text-2xl font-bold neural-title neural-glow-text">
          Neural Workspace
        </h1>
        
        {selectedTopic && (
          <Badge className="neural-gradient-primary text-white border-0">
            {selectedTopic.coins.join(', ')}
          </Badge>
        )}
        
        {initialCoin && (
          <Badge className="neural-gradient-primary text-white border-0">
            {initialCoin}
          </Badge>
        )}
        
        {isAutoGenerated && (
          <Badge variant="outline" className="bg-neural-cyan/20 text-neural-cyan border-neural-cyan/30">
            Market Generated
          </Badge>
        )}
        
        {generationState.isGenerating && (
          <Badge variant="outline" className="neural-button border-neural-cyan text-neural-cyan">
            Generating... {generationState.progress}%
          </Badge>
        )}
      </div>

      <div className="flex items-center gap-2">
        {/* Layout Controls */}
        <NeuralButton
          variant="ghost"
          size="sm"
          onClick={() => setIsLeftCollapsed(!isLeftCollapsed)}
          title="Toggle Topics Column"
        >
          {isLeftCollapsed ? <PanelLeftOpen className="h-4 w-4" /> : <PanelLeftClose className="h-4 w-4" />}
        </NeuralButton>

        <NeuralButton
          variant="ghost"
          size="sm"
          onClick={() => setIsRightCollapsed(!isRightCollapsed)}
          title="Toggle Preview Column"
        >
          {isRightCollapsed ? <PanelLeftOpen className="h-4 w-4 scale-x-[-1]" /> : <PanelLeftClose className="h-4 w-4 scale-x-[-1]" />}
        </NeuralButton>

        <NeuralButton
          variant="ghost"
          size="sm"
          onClick={() => setIsFullscreen(!isFullscreen)}
          title="Fullscreen Mode"
        >
          {isFullscreen ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
        </NeuralButton>

        <div className="w-px h-6 bg-neural-elevated mx-2" />

        <NeuralButton
          variant="ghost"
          size="sm"
          onClick={resetWorkspace}
          title="Reset Workspace"
        >
          <RotateCcw className="h-4 w-4" />
        </NeuralButton>

        <NeuralButton
          variant="ghost"
          size="sm"
          title="Workspace Settings"
        >
          <Settings className="h-4 w-4" />
        </NeuralButton>
      </div>
    </div>
  )

  const ColumnHeader = ({ 
    title, 
    icon: Icon, 
    isActive, 
    onClick 
  }: {
    title: string
    icon: React.ElementType
    isActive: boolean
    onClick: () => void
  }) => (
    <div 
      className={cn(
        "flex items-center gap-2 p-3 border-b border-neural-elevated/30 cursor-pointer neural-transition",
        isActive ? "neural-gradient-primary text-white" : "hover:bg-neural-elevated/20"
      )}
      onClick={onClick}
    >
      <Icon className="h-4 w-4" />
      <span className="font-semibold text-sm">{title}</span>
    </div>
  )

  return (
    <div className={cn("h-screen flex flex-col bg-neural-void", className)}>
      {/* Aurora Background */}
      <div className="neural-aurora" />
      
      {/* Header */}
      <WorkspaceHeader />

      {/* Main Workspace */}
      <div className="flex-1 grid grid-cols-12 gap-px bg-neural-elevated/10 overflow-hidden">
        {/* Topics Column */}
        <div className={cn(
          "bg-neural-void border-r border-neural-elevated/30 flex flex-col",
          getColumnWidth('left')
        )}>
          <ColumnHeader
            title="Topics"
            icon={() => <div className="w-4 h-4 rounded-full bg-neural-success" />}
            isActive={activeColumn === 'topics'}
            onClick={() => setActiveColumn('topics')}
          />
          <div className="flex-1 overflow-hidden">
            <TopicColumn />
          </div>
        </div>

        {/* Generation Column */}
        <div className={cn(
          "bg-neural-void border-r border-neural-elevated/30 flex flex-col",
          getColumnWidth('center')
        )}>
          <ColumnHeader
            title="Generation"
            icon={() => <div className="w-4 h-4 rounded-full bg-neural-cyan" />}
            isActive={activeColumn === 'generation'}
            onClick={() => setActiveColumn('generation')}
          />
          <div className="flex-1 overflow-hidden">
            <GenerationColumn />
          </div>
        </div>

        {/* Preview Column */}
        <div className={cn(
          "bg-neural-void flex flex-col",
          getColumnWidth('right')
        )}>
          <ColumnHeader
            title="Preview"
            icon={() => <div className="w-4 h-4 rounded-full bg-neural-orchid" />}
            isActive={activeColumn === 'preview'}
            onClick={() => setActiveColumn('preview')}
          />
          <div className="flex-1 overflow-hidden">
            <PreviewColumn />
          </div>
        </div>
      </div>

      {/* Mobile Tab Navigation - 画面幅が狭い時のみ表示 */}
      <div className="lg:hidden border-t border-neural-elevated/30 bg-neural-surface/80 backdrop-blur-xl">
        <div className="flex">
          {[
            { key: 'topics', label: 'Topics', color: 'bg-neural-success' },
            { key: 'generation', label: 'Generate', color: 'bg-neural-cyan' },
            { key: 'preview', label: 'Preview', color: 'bg-neural-orchid' }
          ].map(({ key, label, color }) => (
            <button
              key={key}
              onClick={() => setActiveColumn(key as any)}
              className={cn(
                "flex-1 p-4 flex items-center justify-center gap-2 neural-transition",
                activeColumn === key ? "neural-gradient-primary text-white" : "text-neural-text-secondary"
              )}
            >
              <div className={cn("w-2 h-2 rounded-full", color)} />
              <span className="font-medium text-sm">{label}</span>
            </button>
          ))}
        </div>
      </div>
    </div>
  )
}