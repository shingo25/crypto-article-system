# ワーカー専用Dockerfile
FROM node:20-alpine AS base

# 必要なパッケージをインストール
RUN apk add --no-cache \
    libc6-compat \
    python3 \
    make \
    g++ \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# セキュリティ: 非特権ユーザーを作成
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 worker

# 依存関係をコピーしてインストール
FROM base AS deps
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# 開発依存関係も含めてビルド用の準備
FROM base AS builder
COPY package*.json ./
RUN npm ci

# ソースコードをコピー
COPY . .

# TypeScriptをビルド
ENV NODE_ENV production
RUN npm run build

# ワーカー実行用イメージ
FROM base AS runner

WORKDIR /app

# ビルド引数でワーカータイプを指定
ARG WORKER_TYPE
ENV WORKER_TYPE=${WORKER_TYPE}

# 本番用ファイルをコピー
COPY --from=deps --chown=worker:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=worker:nodejs /app/.next ./.next
COPY --from=builder --chown=worker:nodejs /app/src ./src
COPY --from=builder --chown=worker:nodejs /app/package.json ./package.json

# ログディレクトリを作成
RUN mkdir -p /app/logs && chown worker:nodejs /app/logs

# 環境変数を設定
ENV NODE_ENV production
ENV PORT 3000

# ワーカー用のヘルスチェックスクリプト
COPY --chown=worker:nodejs docker/worker-health.sh /usr/local/bin/worker-health.sh
RUN chmod +x /usr/local/bin/worker-health.sh

# ヘルスチェック (ワーカー固有)
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /usr/local/bin/worker-health.sh

# 非特権ユーザーに切り替え
USER worker

# プロセス初期化にdumb-initを使用
ENTRYPOINT ["dumb-init", "--"]

# ワーカータイプに応じてスクリプトを起動
CMD ["sh", "-c", "node src/lib/workers/${WORKER_TYPE}-worker.js"]