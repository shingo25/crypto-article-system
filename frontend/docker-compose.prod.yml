# 本番環境用のDocker Compose設定
version: '3.8'

services:
  # Next.js フロントエンド（本番）
  app:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runner
    container_name: crypto-article-app-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - LOG_LEVEL=warn
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - crypto-prod-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # PostgreSQL データベース（本番）
  postgres:
    image: postgres:15-alpine
    container_name: crypto-article-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ../docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - crypto-prod-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis（本番）
  redis:
    image: redis:7-alpine
    container_name: crypto-article-redis-prod
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    networks:
      - crypto-prod-network
    deploy:
      resources:
        limits:
          memory: 2.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx（本番）
  nginx:
    image: nginx:alpine
    container_name: crypto-article-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - crypto-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # バックグラウンドワーカー（本番）
  worker-article:
    build:
      context: ..
      dockerfile: Dockerfile.worker
      args:
        WORKER_TYPE: article-generator
    container_name: crypto-article-worker-article-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - app_logs:/app/logs
    networks:
      - crypto-prod-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  worker-topic:
    build:
      context: ..
      dockerfile: Dockerfile.worker
      args:
        WORKER_TYPE: topic-collector
    container_name: crypto-article-worker-topic-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
    volumes:
      - app_logs:/app/logs
    networks:
      - crypto-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # 監視・ログ収集
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-article-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ../docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    networks:
      - crypto-prod-network

  grafana:
    image: grafana/grafana:latest
    container_name: crypto-article-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ../docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - crypto-prod-network

  # バックアップサービス
  backup:
    image: postgres:15-alpine
    container_name: crypto-article-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - backup_data:/backups
      - ../scripts/backup.sh:/backup.sh
    command: >
      sh -c "
        chmod +x /backup.sh &&
        crond -f
      "
    networks:
      - crypto-prod-network
    depends_on:
      - postgres

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  backup_data:
    driver: local

networks:
  crypto-prod-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: crypto-prod