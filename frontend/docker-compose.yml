version: '3.8'

services:
  # Next.js フロントエンド
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: crypto-article-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crypto_articles
      - REDIS_URL=redis://redis:6379
      - REDIS_KEY_PREFIX=crypto-article:
      - SENTRY_DSN=${SENTRY_DSN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
      - LOG_LEVEL=info
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL データベース
  postgres:
    image: postgres:15-alpine
    container_name: crypto-article-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: crypto_articles
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crypto_articles"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis (キャッシュ & キュー)
  redis:
    image: redis:7-alpine
    container_name: crypto-article-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --timeout 0
      --tcp-keepalive 300
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

  # バックグラウンドワーカー (記事生成)
  worker-article:
    build:
      context: .
      dockerfile: Dockerfile.worker
      args:
        WORKER_TYPE: article-generator
    container_name: crypto-article-worker-article
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crypto_articles
      - REDIS_URL=redis://redis:6379
      - REDIS_KEY_PREFIX=crypto-article:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LOG_LEVEL=info
      - QUEUE_CONCURRENCY=2
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crypto-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # バックグラウンドワーカー (トピック収集)
  worker-topic:
    build:
      context: .
      dockerfile: Dockerfile.worker
      args:
        WORKER_TYPE: topic-collector
    container_name: crypto-article-worker-topic
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crypto_articles
      - REDIS_URL=redis://redis:6379
      - REDIS_KEY_PREFIX=crypto-article:
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
      - LOG_LEVEL=info
      - QUEUE_CONCURRENCY=1
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crypto-network

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: crypto-article-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (メトリクス収集)
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-article-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - crypto-network

  # Grafana (メトリクス可視化)
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-article-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - crypto-network

  # Redis Insight (Redis GUI)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: crypto-article-redis-insight
    restart: unless-stopped
    volumes:
      - redis_insight_data:/db
    ports:
      - "8001:8001"
    depends_on:
      - redis
    networks:
      - crypto-network

  # pgAdmin (PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: crypto-article-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8002:80"
    depends_on:
      - postgres
    networks:
      - crypto-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_insight_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  crypto-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16